{
  "swagger": "2.0",
  "info": {
    "description": "Smyth API",
    "version": "1.0.0",
    "title": "Smyth API",
    "basePath": "/v1",
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "basePath": "/v1",
  "schemes": ["http", "https"],
  "produces": ["application/json"],
  "consumes": ["application/json"],
  "securityDefinitions": {
    "Bearer": {
      "description": "For accessing the protected API resources, you must have received a valid token after registering or logging in. This JWT token must then be used for all protected resources by passing it in via the 'Authorization' header.\n\nA JWT token is generated by the API by either registering via /users or logging in via /users/login. The following format must be in the 'Authorization' header :\n\n Token: xxxxxx.yyyyyyy.zzzzzz\n",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "TeamId": {
      "description": "For accessing the protected API resources, you must have received a valid token after registering or logging in. This JWT token must then be used for all protected resources by passing it in via the 'Authorization' header.\n\nA JWT token is generated by the API by either registering via /users or logging in via /users/login. The following format must be in the 'Authorization' header :\n\n Token: xxxxxx.yyyyyyy.zzzzzz\n",
      "type": "apiKey",
      "name": "x-smyth-team-id",
      "in": "header"
    }
  },
  "definitions": {
    "GenericErrorModel": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      },
      "required": ["errors"]
    },
    "Domain": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Endpoint": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        }
      }
    },
    "SettingsRequest": {
      "type": "object",
      "properties": {
        "settingKey": {
          "type": "string"
        },
        "settingValue": {
          "type": "string"
        }
      }
    },
    "AgentSettingsRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "DomainEndpointData": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "properties": {
            "method": {
              "type": "string",
              "enum": ["GET", "POST", "PUT", "DELETE"]
            },
            "componentId": {
              "type": "string"
            }
          }
        },
        "agentId": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        }
      }
    },
    "ResponseMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "ResponseMessageWithData": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "data": {
          "type": "object"
        }
      }
    },

    "DatasourceType": {
      "type": "string",
      "enum": ["PDF", "WORD", "SITEMAP", "WEBPAGE"]
    },

    "Agent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },

    "AgentRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "data": {
          "type": "object"
        }
      }
    }
  },

  "paths": {
    "/user/me": {
      "get": {
        "tags": ["User"],
        "summary": "Get my user",
        "description": "Get my user",
        "operationId": "getMyUser",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "my user",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/user/account": {
      "delete": {
        "tags": ["User"],
        "summary": "Delete user account",
        "description": "Delete user account",
        "operationId": "deleteUserAccount",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "deleted user account",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/user/settings": {
      "get": {
        "tags": ["User"],
        "summary": "Get settings",
        "description": "Get settings",
        "operationId": "getSettings",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "put": {
        "tags": ["User"],
        "summary": "Create/Update settings",
        "description": "Update settings",
        "operationId": "updateSettings",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing settings data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SettingsRequest"
            }
          }
        ],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/user/settings/{settingKey}": {
      "delete": {
        "tags": ["User"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "summary": "Delete setting",
        "description": "Delete setting",
        "operationId": "deleteSetting",
        "produces": ["application/json"],

        "parameters": [
          {
            "name": "settingKey",
            "in": "path",
            "description": "Setting key",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "get": {
        "tags": ["User"],
        "summary": "Get setting",
        "description": "Get setting",
        "operationId": "getSetting",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "settingKey",
            "in": "path",
            "description": "Setting key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/me": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get my team",
        "description": "Get my team",
        "operationId": "getMyTeam",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "my team",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/{teamId}/name": {
      "put": {
        "tags": ["Teams"],
        "summary": "Update team name",
        "description": "Update team name",
        "operationId": "updateTeamName",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team id",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Object containing team name",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "updated team name",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/me/leave": {
      "post": {
        "tags": ["Teams"],
        "summary": "Leave team",
        "description": "Leave team",
        "operationId": "leaveTeam",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "left team",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/members": {
      "get": {
        "tags": ["Teams"],
        "summary": "List all team members",
        "description": "List team members",
        "operationId": "getTeamMembers",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "includeRoles",
            "in": "query",
            "description": "Include roles",
            "required": false,
            "type": "boolean"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/members/{memberId}/role": {
      "put": {
        "tags": ["Teams"],
        "summary": "Update team member role",
        "description": "Update team member role",
        "operationId": "updateTeamMemberRole",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Member id",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Role data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "roleId": {
                  "type": "number"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "updated team member role",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/members/{memberId}": {
      "delete": {
        "tags": ["Teams"],
        "summary": "Delete team member",
        "description": "Delete team member",
        "operationId": "deleteTeamMember",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Member id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "deleted team member",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/subteams": {
      "post": {
        "tags": ["Teams"],
        "summary": "Create subteam",
        "description": "Create subteam",
        "operationId": "createSubteam",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Subteam data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "created subteam",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/teams/subteams/{subteamId}": {
      "delete": {
        "tags": ["Teams"],
        "summary": "Delete subteam",
        "description": "Delete subteam",
        "operationId": "deleteSubteam",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "subteamId",
            "in": "path",
            "description": "Subteam id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "deleted subteam",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/{subteamId}/members/assign/{memberId}": {
      "put": {
        "tags": ["Teams"],
        "summary": "Assign team member to a sub-team (works for sub-teams only)",
        "description": "Assign team member",
        "operationId": "assignTeamMember",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "subteamId",
            "in": "path",
            "description": "Subteam id",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "Member id",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Role data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "roleId": {
                  "type": "number"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "assigned team member",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/{subteamId}/members/unassign/{memberId}": {
      "delete": {
        "tags": ["Teams"],
        "summary": "Unassign team member from a sub-team (works for sub-teams only)",
        "description": "Unassign team member",
        "operationId": "unassignTeamMember",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "subteamId",
            "in": "path",
            "description": "Subteam id",
            "required": true,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "Member id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "unassigned team member",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/roles/me": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get my roles",
        "description": "Get my roles",
        "operationId": "getMyRoles",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "my roles",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/roles": {
      "get": {
        "tags": ["Teams"],
        "summary": "List all Team roles",
        "description": "List roles",
        "operationId": "getRoles",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "roles",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "post": {
        "tags": ["Teams"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "summary": "Add Team role",
        "description": "Add Team role that can be assigned to team members",
        "operationId": "addRole",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Role data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "canManageTeam": {
                  "type": "boolean"
                },
                "acl": {
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "added role",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "put": {
        "tags": ["Teams"],
        "summary": "Update Team role",
        "description": "Update Team role",
        "operationId": "updateRole",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Role data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "roleId": {
                  "type": "number"
                },
                "canManageTeam": {
                  "type": "boolean"
                },
                "acl": {
                  "type": "object"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "updated role",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/roles/{roleId}": {
      "delete": {
        "tags": ["Teams"],
        "summary": "Delete Team role",
        "description": "Delete role",
        "operationId": "deleteRole",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "deleted role",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "get": {
        "tags": ["Teams"],
        "summary": "Get role",
        "description": "Get role",
        "operationId": "getRole",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "role",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/teams/settings": {
      "get": {
        "tags": ["Teams"],
        "summary": "Get team settings",
        "description": "Get team settings",
        "operationId": "getTeamSettings",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "put": {
        "tags": ["Teams"],
        "summary": "Create/Update team settings",
        "description": "Update team settings",
        "operationId": "updateTeamSettings",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing settings data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SettingsRequest"
            }
          }
        ],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/teams/settings/{settingKey}": {
      "delete": {
        "tags": ["Teams"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "summary": "Delete team setting",
        "description": "Delete team setting",
        "operationId": "deleteTeamSetting",
        "produces": ["application/json"],

        "parameters": [
          {
            "name": "settingKey",
            "in": "path",
            "description": "Setting key",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "get": {
        "tags": ["Teams"],
        "summary": "Get setting",
        "description": "Get setting",
        "operationId": "getTeamSetting",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "settingKey",
            "in": "path",
            "description": "Setting key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/subscriptions/me": {
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Get my team subscription",
        "description": "Get my team subscription",
        "operationId": "getMyTeamSubscription",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "includeObject",
            "in": "query",
            "description": "Include expanded subs object",
            "required": false,
            "type": "boolean"
          }
        ],

        "responses": {
          "200": {
            "description": "my subscription",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/subscriptions/checkout/generate-session": {
      "post": {
        "tags": ["Subscriptions"],
        "summary": "Generate subscription session",
        "description": "Generate subscription session",
        "operationId": "generateSubscriptionSession",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing subscription data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "priceId": {
                  "type": "string"
                },
                "susccessUrl": {
                  "type": "string"
                },
                "returnUrl": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "subscription session",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/subscriptions/change-plan": {
      "post": {
        "tags": ["Subscriptions"],
        "summary": "Upgrade/downgrade subscription",
        "description": "Upgrade/downgrade subscription",
        "operationId": "changeSubscription",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing subscription data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newPriceId": {
                  "type": "string"
                },
                "isUserAcknowledged": {
                  "type": "boolean"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "subscription session",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/subscriptions/billing-portal/generate-session": {
      "post": {
        "tags": ["Subscriptions"],
        "summary": "Generate billing session",
        "description": "Generate billing session",
        "operationId": "generateBillingSession",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing subscription data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "returnUrl": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "subscription session",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/subscriptions/v2/checkout/generate-session": {
      "post": {
        "tags": ["Subscriptions V2"],
        "summary": "Generate subscription session",
        "description": "Generate subscription session",
        "operationId": "generateSubscriptionSession",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing subscription data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "priceIds": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "priceId": {
                        "type": "string"
                      },
                      "for": {
                        "type": "string",
                        "enum": ["tasks usage", "user seats"]
                      }
                    },
                    "required": ["priceId", "for"]
                  }
                },
                "successUrl": {
                  "type": "string"
                },
                "cancelUrl": {
                  "type": "string"
                }
              },
              "required": ["priceIds"]
            }
          }
        ],

        "responses": {
          "200": {
            "description": "subscription session",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/subscriptions/v2/change-plan": {
      "post": {
        "tags": ["Subscriptions V2"],
        "summary": "Upgrade/downgrade subscription",
        "description": "Upgrade/downgrade subscription",
        "operationId": "changeSubscription",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing subscription data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newPriceIds": {
                  "type": "array",
                  "description": "Array of price IDs for updating both user seats and task usage.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "priceId": {
                        "type": "string",
                        "description": "The Stripe price ID for user seats or tasks usage."
                      },
                      "for": {
                        "type": "string",
                        "enum": ["user seats", "tasks usage"],
                        "description": "Indicates whether the price ID is for user seats or task usage."
                      }
                    },
                    "required": ["priceId", "for"]
                  }
                },
                "isUserAcknowledged": {
                  "type": "boolean"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "subscription session",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/subscriptions/validate-promo-code": {
      "post": {
        "tags": ["Subscriptions V2"],
        "summary": "Validate promo code",
        "description": "Validate promo code",
        "operationId": "validatePromoCode",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Promo code",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "promoCode": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "valid: boolean, promoCode: any",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agents": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get all agents",
        "description": "Get all agents",
        "operationId": "getAgents",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "includeSettings",
            "in": "query",
            "description": "Include agent settings",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "contributors",
            "in": "query",
            "description": "Include agent contributors",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "agentActivity",
            "in": "query",
            "description": "Include agent activity log",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agents/models": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get all model agents",
        "description": "Get all model agents",
        "operationId": "getModelAgents",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agent/{agentId}": {
      "delete": {
        "tags": ["Agents"],
        "summary": "Delete agent",
        "description": "Delete agent",
        "operationId": "deleteAgent",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "get": {
        "tags": ["Agents"],
        "summary": "Get agent",
        "description": "Get agent",
        "operationId": "getAgent",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "extended data",
            "required": false,
            "type": "array"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/ai-agent/{agentId}/lock-status": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get agent lock status",
        "description": "Get agent lock status",
        "operationId": "getAgentLockStatus",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/ai-agent": {
      "post": {
        "tags": ["Agents"],
        "summary": "Create or Update agent",
        "description": "Create or Update agent",
        "operationId": "postAgent",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing agent data. Include (`id` and `lockId` for updates)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentRequest"
            }
          }
        ],

        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agent/lock": {
      "put": {
        "tags": ["Agents"],
        "summary": "Request agent lock",
        "description": "Lock agent",
        "operationId": "lockAgent",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing agent deployment data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "agentId": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "locked agent",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/ai-agent/lock/release": {
      "put": {
        "tags": ["Agents"],
        "summary": "Release agent lock",
        "description": "Release agent lock",
        "operationId": "releaseAgentLock",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing agent deployment data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "agentId": {
                  "type": "string"
                },
                "lockId": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "released agent lock",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/ai-agent/lock/refresh": {
      "put": {
        "tags": ["Agents"],
        "summary": "Refresh agent lock",
        "description": "Refresh agent lock",
        "operationId": "refreshAgentLock",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing agent deployment data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "agentId": {
                  "type": "string"
                },
                "lockId": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "refreshed agent lock",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/chats": {
      "post": {
        "tags": ["Chats"],
        "summary": "Create conversation",
        "description": "Create conversation",
        "operationId": "createConversation",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing conversation data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "conversation": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "default": ""
                    },
                    "summary": {
                      "type": "string",
                      "default": ""
                    },

                    "aiAgentId": {
                      "type": "string"
                    },
                    "chunkSize": {
                      "type": "number",
                      "default": null
                    },
                    "lastChunkID": {
                      "type": "string",
                      "default": null
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "get": {
        "tags": ["Chats"],
        "summary": "Get all team conversations",
        "description": "Get all team conversations",
        "operationId": "getTeamConversations",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "isOwner",
            "in": "query",
            "description": "Only conversations owned by the user",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "default": 1,
            "type": "number"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "default": 10,
            "type": "number"
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sort by this field. Possible values: createdAt, updatedAt, label.",
            "required": false,
            "default": "createdAt",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order. Possible values: asc, desc.",
            "required": false,
            "default": "desc",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "conversations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "summary": {
                            "type": "string"
                          },
                          "aiAgentId": {
                            "type": "string"
                          },
                          "chunkSize": {
                            "type": "number"
                          },
                          "lastChunkID": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/chats/me": {
      "get": {
        "tags": ["Chats"],
        "summary": "Get my conversations",
        "description": "Get my conversations",
        "operationId": "getMyConversations",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string"
                  },
                  "aiAgentId": {
                    "type": "string"
                  },
                  "chunkSize": {
                    "type": "number"
                  },
                  "lastChunkID": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },

    "/chats/{conversationId}": {
      "get": {
        "tags": ["Chats"],
        "summary": "Get conversation by ID",
        "description": "Get conversation by ID",
        "operationId": "getConversationById",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "conversationId": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "summary": {
                  "type": "string"
                },
                "teamId": {
                  "type": "string"
                },
                "ownerId": {
                  "type": "number"
                },
                "aiAgentId": {
                  "type": "string"
                },
                "chunkSize": {
                  "type": "number"
                },
                "lastChunkID": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Chats"],
        "summary": "Update conversation",
        "description": "Update conversation",
        "operationId": "updateConversation",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Object containing conversation data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "conversation": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "default": null
                    },
                    "summary": {
                      "type": "string",
                      "default": null
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": ["Chats"],
        "summary": "Delete conversation",
        "description": "Delete conversation",
        "operationId": "deleteConversation",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agent/{agentId}/deployments": {
      "get": {
        "tags": ["Agent Deployments"],
        "summary": "Get agent deployments",
        "description": "Get agent deployments",
        "operationId": "getAgentDeployments",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "extended data",
            "required": false,
            "type": "array"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "agent deployments",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/ai-agent/{agentId}/deployments/latest": {
      "get": {
        "tags": ["Agent Deployments"],
        "summary": "Get agent latest deployment",
        "description": "Get agent latest deployment",
        "operationId": "getAgentLatestDeployment",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "agent deployments",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agent/deployments/{deploymentId}": {
      "get": {
        "tags": ["Agent Deployments"],
        "summary": "Get agent deployment",
        "description": "Get agent deployment",
        "operationId": "getAgentDeployment",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "description": "Deployment id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "agent deployment",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agent/deployments": {
      "post": {
        "tags": ["Agent Deployments"],
        "summary": "Create agent deployment",
        "description": "Create agent deployment",
        "operationId": "postAgentDeployment",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing agent deployment data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string"
                },
                "agentId": {
                  "type": "string"
                },

                "releaseNotes": {
                  "type": "string"
                },

                "distributionId": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "created agent deployment",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/distributions": {
      "get": {
        "tags": ["Distributions"],
        "summary": "Get all distributions",
        "description": "Get all distributions",
        "operationId": "getDistributions",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "post": {
        "tags": ["Distributions"],
        "summary": "Create distribution",
        "description": "Create distribution",
        "operationId": "createDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing distribution data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "created distribution",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/distributions/{id}": {
      "get": {
        "tags": ["Distributions"],
        "summary": "Get distribution by ID",
        "description": "Get distribution by ID",
        "operationId": "getDistributionById",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Distribution ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        }
      },

      "delete": {
        "tags": ["Distributions"],
        "summary": "Delete distribution",
        "description": "Delete distribution",
        "operationId": "deleteDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Distribution ID",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agent/{agentId}/settings": {
      "get": {
        "tags": ["Agent Settings"],
        "summary": "Get settings",
        "description": "Get settings",
        "operationId": "getAgentSettings",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "put": {
        "tags": ["Agent Settings"],
        "summary": "Create/Update settings",
        "description": "Update settings",
        "operationId": "updateAgentSettings",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Object containing settings data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentSettingsRequest"
            }
          }
        ],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agent/{agentId}/settings/{key}": {
      "delete": {
        "tags": ["Agent Settings"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "summary": "Delete agent setting",
        "description": "Delete agent setting",
        "operationId": "deleteAgentSetting",
        "produces": ["application/json"],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Setting key",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "get": {
        "tags": ["Agent Settings"],
        "summary": "Get Agent setting",
        "description": "Get Agent setting",
        "operationId": "getAgentSetting",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Setting key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agent/{agentId}/logs/calls": {
      "get": {
        "tags": ["Agent Logs"],
        "summary": "Get agent call logs",
        "description": "Get agent call logs",
        "operationId": "getAgentCallLogs",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer"
          },

          {
            "name": "sourceId",
            "in": "query",
            "description": "Source id",
            "required": false,
            "type": "string"
          },
          {
            "name": "componentId",
            "in": "query",
            "description": "Component id",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionID",
            "in": "query",
            "description": "Session id",
            "required": false,
            "type": "string"
          },
          {
            "name": "inputDateFrom",
            "in": "query",
            "description": "Input date from",
            "required": false,
            "type": "string"
          },
          {
            "name": "inputDateTo",
            "in": "query",
            "description": "Input date to",
            "required": false,
            "type": "string"
          },
          {
            "name": "outputDateFrom",
            "in": "query",
            "description": "Output date from",
            "required": false,
            "type": "string"
          },
          {
            "name": "outputDateTo",
            "in": "query",
            "description": "Output date to",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags",
            "required": false,
            "type": "string"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "agent call logs",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agent/{agentId}/logs/sessions": {
      "get": {
        "tags": ["Agent Logs"],
        "summary": "Get agent call logs sessions",
        "description": "Get agent call logs sessions",
        "operationId": "getAgentCallLogsGroupedBySession",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer"
          }
        ],

        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "agent call logs",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/ai-agent/{agentId}/bulk-calls": {
      "post": {
        "tags": ["Agent Bulk Calls"],
        "summary": "Create bulk agent call",
        "description": "Create bulk agent call",
        "operationId": "postBulkAgentCall",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },

          {
            "name": "body",
            "in": "body",
            "description": "Object containing agent call logs data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "rows": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "payload": {
                        "type": "object"
                      }
                    }
                  }
                },
                "componentId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "agent call logs",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "delete": {
        "tags": ["Agent Bulk Calls"],
        "summary": "Delete bulk agent call",
        "description": "Delete bulk agent call",
        "operationId": "deleteBulkAgentCall",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "componentId",
            "in": "query",
            "description": "Component id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "agent call logs",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/ai-agent/{agentId}/bulk-calls/progress": {
      "get": {
        "tags": ["Agent Bulk Calls"],
        "summary": "Get bulk agent call progress  [LEGACY]",
        "description": "Get bulk agent call progress",
        "operationId": "getBulkAgentCallProgress",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "componentId",
            "in": "query",
            "description": "Component id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "agent call logs",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/ai-agent/{agentId}/bulk-calls/latest": {
      "get": {
        "tags": ["Agent Bulk Calls"],
        "summary": "Get latest bulk agent call progress",
        "description": "Get latest bulk agent call progress",
        "operationId": "getLatestBulkAgentCallProgress",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "componentId",
            "in": "query",
            "description": "Component id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "agent call logs",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/ai-agent/{agentId}/skill-call": {
      "post": {
        "tags": ["Agent Calls"],
        "summary": "Create agent call",
        "description": "Create agent call",
        "operationId": "postAgentCall",
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },

          {
            "name": "body",
            "in": "body",
            "description": "Object containing agent call data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "payload": {
                  "type": "object"
                },
                "componentId": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "agent call logs",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },
    "/domain": {
      "post": {
        "tags": ["Domains"],
        "summary": "Create Domain",
        "description": "Create Domain",
        "operationId": "postDomain",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing domain data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid domain data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },

      "put": {
        "tags": ["Domains"],
        "summary": "Update Domain",
        "description": "Update Domain",
        "operationId": "updateDomain",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing updated domain data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "aiAgentId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid domain data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/domains": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get all domains",
        "description": "Get all domains [M2M allowed]",
        "operationId": "getDomains",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "verified",
            "in": "query",
            "description": "Domain Status",
            "required": true,
            "type": "boolean"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/domain/query": {
      "post": {
        "tags": ["Domains"],
        "summary": "Query Domain by name",
        "description": "Query Domain by name [M2M allowed]",
        "operationId": "queryDomain",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing domain data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid domain data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          },
          "404": {
            "description": "Domain not found",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/domain/delete": {
      "post": {
        "tags": ["Domains"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "summary": "Delete Domain",
        "description": "Delete Domain",
        "operationId": "deleteDomain",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing domain data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid domain data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          },
          "404": {
            "description": "Domain not found",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/domain/{name}/verify": {
      "get": {
        "description": "Check if domain is verified",
        "operationId": "verifyDomain",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Domain name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Domain verified",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "404": {
            "description": "Domain not found",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "tags": ["Domains"],
        "summary": "Check Verification status of a Domain"
      }
    },
    "/domain/{name}/get-cname-target": {
      "get": {
        "description": "Get domain CNAME target host",
        "summary": "Get CNAME target host of a Domain",
        "operationId": "getCnameTarget",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Domain name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "CNAME target host",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        },
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "tags": ["Domains"]
      }
    },

    "/domain/{name}/status": {
      "get": {
        "description": "Get domain status",
        "operationId": "getDomainStatus",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Domain name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Domain status",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "404": {
            "description": "Domain not found",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "tags": ["Domains"],
        "summary": "Get Domain status"
      }
    },

    "/domain/endpoint/query": {
      "post": {
        "tags": ["Endpoints"],
        "summary": "Query Endpoint by path, domain name and method",
        "description": "Query Endpoint by path, domain name and method",
        "operationId": "queryEndpoint",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing endpoint data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Endpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid endpoint data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          },
          "404": {
            "description": "Endpoint not found",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/domain/endpoint": {
      "post": {
        "tags": ["Endpoints"],
        "summary": "Create or update endpoint",
        "description": "Create or update endpoint",
        "operationId": "postEndpoint",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing endpoint data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainEndpointData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid endpoint data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/domain/endpoint/delete": {
      "post": {
        "tags": ["Endpoints"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "summary": "Delete Endpoint",
        "description": "Delete Endpoint",
        "operationId": "deleteEndpoint",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing endpoint data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Endpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid endpoint data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          },
          "404": {
            "description": "Endpoint not found",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/vectors/namespaces": {
      "get": {
        "tags": ["Vectors"],
        "summary": "Get all vector namespaces",
        "description": "Get all vector namespaces",
        "operationId": "getVectorNamespaces",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "post": {
        "tags": ["Vectors"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "summary": "Add vector namespace",
        "description": "Add vector namespace",
        "operationId": "addNamespace",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing endpoint data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "useCustomVectorStorage": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/vectors/namespaces/{namespaceName}": {
      "delete": {
        "tags": ["Vectors"],
        "parameters": [
          {
            "name": "namespaceName",
            "in": "path",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          }
        ],
        "summary": "Delete vector namespace",
        "description": "Delete namespace",
        "operationId": "deleteNamespace",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "deleted namespace",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/vectors/namespaces/search": {
      "get": {
        "tags": ["Vectors"],
        "summary": "Query Namespace",
        "description": "Run similarity search on a namespace. For M2M calls, pass the 'namespaceId' instead of 'namespaceName' in the query params",
        "operationId": "runSimilaritySearch",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": true,
            "type": "string"
          },
          {
            "name": "raw",
            "in": "query",
            "description": "Include metadata",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "topK",
            "in": "query",
            "description": "Number of results",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespaceName",
            "in": "query",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/vectors/datasources": {
      "get": {
        "tags": ["Vectors"],
        "summary": "List all datasources",
        "description": "List datasources",
        "operationId": "getDatasources",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "namespaceName",
            "in": "query",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "post": {
        "tags": ["Vectors"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "summary": "Add datasource",
        "description": "Add vector datasource",
        "operationId": "addDatasource",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Datasource data. for 'type' field, please refer to 'DatasourceType' model at the bottom of the page",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["SITEMAP", "PDF", "WORD", "WEBPAGE"]
                },
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "namespaceName": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/vectors/datasources/text": {
      "post": {
        "tags": ["Vectors"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "summary": "Add datasource text",
        "description": "Add vector datasource text",
        "operationId": "addDatasourceText",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Datasource data. for 'type' field, please refer to 'DatasourceType' model at the bottom of the page",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                },
                "namespaceId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/vectors/datasources/{dataSourceId}": {
      "get": {
        "tags": ["Vectors"],
        "summary": "Get datasource details",
        "description": "Get datasource details",
        "operationId": "getDatasource",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "Datasource id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },

      "delete": {
        "tags": ["Vectors"],
        "summary": "Delete datasource",
        "description": "Delete datasource",
        "operationId": "deleteDatasource",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "Datasource id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "deleted datasource",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/vectors/datasources/{dataSourceId}/status": {
      "get": {
        "tags": ["Vectors"],
        "summary": "Check datasource status",
        "description": "Check datasource status",
        "operationId": "getDatasourceStatus",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "Datasource id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/vectors/datasources/{dataSourceId}/sitemap_status": {
      "get": {
        "tags": ["Vectors"],
        "summary": "Check datasource SITEMAP status",
        "description": "fetch all urls status from sitemap",
        "operationId": "getSitemapStatus",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "dataSourceId",
            "in": "path",
            "description": "Datasource id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/vectors/custom_storage": {
      "get": {
        "tags": ["Vectors"],
        "summary": "Get the team custom vector storage",
        "description": "Get the team custom vector storage",
        "operationId": "getCustomVectprStorage",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "custom storage",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },
      "post": {
        "tags": ["Vectors"],
        "summary": "Add custom vector storage",
        "description": "Add custom vector storage",
        "operationId": "addCustomVectorStorage",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing custom vector storage data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "projectUrl": {
                  "type": "string"
                },
                "apiKey": {
                  "type": "string"
                },
                "indexName": {
                  "type": "string"
                },
                "environment": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "custom storage",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": ["Vectors"],
        "summary": "Delete custom vector storage",
        "description": "Delete custom vector storage",
        "operationId": "deleteCustomVectorStorage",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "responses": {
          "200": {
            "description": "custom storage",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          }
        }
      }
    },

    "/embodiments": {
      "post": {
        "tags": ["Embodiments"],
        "summary": "Create embodiment",
        "description": "Create embodiment",
        "operationId": "postEmbodiment",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Embodiment data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "properties": {
                  "type": "object"
                },
                "aiAgentId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "embodiments": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },

      "get": {
        "tags": ["Embodiments"],
        "summary": "Get all embodiments by agent id",
        "description": "Get all embodiments by agent id",
        "operationId": "getEmbodiments",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "aiAgentId",
            "in": "query",
            "description": "Agent Id",
            "required": true,
            "type": "string"
          }
        ],

        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "embodiments": {
                  "type": "object"
                }
              }
            }
          }
        }
      },

      "put": {
        "tags": ["Embodiments"],
        "summary": "Update embodiment",
        "description": "Update embodiment",
        "operationId": "updateEmbodiment",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Embodiment data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "properties": {
                  "type": "object"
                },
                "embodimentId": {
                  "type": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated embodiment",
            "schema": {
              "type": "object",
              "properties": {
                "embodiments": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/embodiments/{embodimentId}": {
      "get": {
        "tags": ["Embodiments"],
        "summary": "Get embodiment by id",
        "description": "Get embodiment by id",
        "operationId": "getEmbodimentById",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "embodimentId",
            "in": "path",
            "description": "Embodiment id",
            "required": true,
            "type": "number"
          }
        ],

        "responses": {
          "200": {
            "description": "embodiment",
            "schema": {
              "type": "object",
              "properties": {
                "embodiments": {
                  "type": "object"
                }
              }
            }
          }
        }
      },

      "delete": {
        "tags": ["Embodiments"],
        "summary": "Delete embodiment",
        "description": "Delete embodiment",
        "operationId": "deleteEmbodiment",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "embodimentId",
            "in": "path",
            "description": "Embodiment id",
            "required": true,
            "type": "number"
          }
        ],

        "responses": {
          "200": {
            "description": "deleted embodiment",
            "schema": {
              "type": "object",
              "properties": {
                "embodiments": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },

    "/jobs": {
      "post": {
        "tags": ["Jobs"],
        "summary": "Create a job",
        "description": "Create a job",
        "operationId": "createJob",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing job data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobType": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "data": {
                  "type": "object"
                },
                "options": {
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            },

            "examples": {
              "application/json": {
                "jobType": "AGENT_SCHEDULE",
                "name": "Send Message",
                "data": {
                  "componentId": "component_1",
                  "agentId": "clpc800ik9ti44wpjpitt",

                  "body": {
                    "foo": "bar"
                  }
                },
                "options": {
                  "repeat": {
                    "patternDetails": {
                      "daysOfWeek": [0, 1, 2, 3, 4, 5, 6],
                      "repeatEveryUnit": "hour",
                      "repeatEvery": 1
                    },
                    "limit": 10,
                    "startDate": "2021-01-01T00:00:00.000Z",
                    "endDate": "2021-01-01T00:00:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid job data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": ["Jobs"],
        "summary": "Get a job by id",
        "description": "Get a job by id",
        "operationId": "getJobById",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid job data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "put": {
        "tags": ["Jobs"],
        "summary": "Update a job",
        "description": "Update a job",
        "operationId": "updateJob",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing job data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "data": {
                  "type": "object"
                },
                "options": {
                  "type": "object"
                }
              }
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Job id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid job data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "delete": {
        "tags": ["Jobs"],
        "summary": "Delete a job",
        "description": "Delete a job",
        "operationId": "deleteJob",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid job data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/jobs/agents/{agentId}": {
      "get": {
        "tags": ["Jobs"],
        "summary": "Get all jobs by agent id",
        "description": "Get all jobs by agent id",
        "operationId": "getJobsByAgentId",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status of the job",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid job data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },

      "delete": {
        "tags": ["Jobs"],
        "summary": "Delete all jobs by agent id",
        "description": "Delete all jobs by agent id",
        "operationId": "deleteJobsByAgentId",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid job data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/jobs/components/{componentId}": {
      "delete": {
        "tags": ["Jobs"],
        "summary": "delete a job by component id",
        "description": "delete a job by component id",
        "operationId": "deletJobByComponentId",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "Component id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid job data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/space": {
      "post": {
        "tags": ["Space"],
        "summary": "Create a space",
        "description": "Create a space",
        "operationId": "createSpace",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Object containing new space data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid space data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/space/list": {
      "get": {
        "tags": ["Space"],
        "summary": "Get all spaces in a team",
        "description": "Get all spaces in the org/team the current user belongs to.",
        "operationId": "getSpaces",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "onlymine",
            "in": "query",
            "description": "Get only spaces created by the current user",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessageWithData"
            }
          }
        }
      }
    },
    "/space/{spaceId}": {
      "put": {
        "tags": ["Space"],
        "summary": "Update a space",
        "description": "Update a space",
        "operationId": "updateSpace",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "Space id",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Object containing updated space data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid space data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "delete": {
        "tags": ["Space"],
        "summary": "Delete a space",
        "description": "Delete a space",
        "operationId": "deleteSpace",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],

        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "Space id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessage"
            }
          },
          "400": {
            "description": "Invalid space data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/space/membership": {
      "get": {
        "tags": ["Space"],
        "summary": "Get all the spaces current user is a member of",
        "description": "Get all the spaces current user is a member of",
        "operationId": "getSpaceMemberships",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessageWithData"
            }
          },
          "400": {
            "description": "Invalid space data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/space/{spaceId}/members": {
      "get": {
        "tags": ["Space"],
        "summary": "Get all members of a space",
        "description": "Get all members of a space",
        "operationId": "getSpaceMembers",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "Space id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessageWithData"
            }
          },
          "400": {
            "description": "Invalid space data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/space/{spaceId}/agents": {
      "get": {
        "tags": ["Space"],
        "summary": "Get all agents of a space",
        "description": "Get all agents of a space",
        "operationId": "getSpaceAgents",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": [],
            "TeamId": []
          }
        ],
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "Space id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMessageWithData"
            }
          },
          "400": {
            "description": "Invalid space data",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    }
  }
}
